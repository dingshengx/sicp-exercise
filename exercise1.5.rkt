#lang sicp
#|练习 1.5。Ben Bitdiddle 设计了一个测试,用于判断他所面对的解释器使用的是应用顺序求值还是正常顺序求值。他定义了以下两个过程:

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

然后他计算表达式

(test 0 (p))

Ben 在使用 应用顺序求值?他会观察到 解释器是否使用正常顺序求值?解释你的答案。 (假设无论解释器使用的是正常顺序还是应用顺序,特殊形式 if 的评估规则都是相同的:首先评估谓词表达式,然后根据结果决定是否评估结果表达式或替代表达式。)|#
#|
答：不会。因为应用顺序会先求解参数，然后再执行函数逻辑，而(p)会触发递归并且无法终结。
具体分析：
1. (define (p) (p))是个无限递归过程，也就是self-application，第一个（p）是定义一个函数p，第二个（p）表示的是参数，因为参数是函数p自身，满足self-application定义
2. Applicative-order (应用序)和Normal-order (正常序)；
3. 应用序是先求解参数，然后得到参数的值后，再进入函数体执行具体逻辑；
4. 正常序是先展开函数执行内部逻辑，然后再取参数值
|#
